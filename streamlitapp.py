# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lOQMW5IWDH3jB0gKofY9lP0_Ke3zWVjd
"""

import os
import streamlit as st
import google.generativeai as genai

# Configure the Google Generative AI SDK
genai.configure(api_key='AIzaSyCLtgAXkV_lAJWmJQ-vXedhYgFLWEmADbg')

# Create the model
generation_config = {
    "temperature": 0.9,
    "top_p": 1,
    "top_k": 0,
    "max_output_tokens": 2048,
    "response_mime_type": "text/plain",
}
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]

model = genai.GenerativeModel(
    model_name="gemini-1.0-pro",
    safety_settings=safety_settings,
    generation_config=generation_config,
)

def analyze_text(input_text, analysis_type):
    if analysis_type == "Grammar Correction":
        prompt = f"Correct the grammar of the given sentences: {input_text}"
    elif analysis_type == "Emotion Detection":
        prompt = f"Detect the emotions in the given text: {input_text}"
    elif analysis_type == "Informal to Formal":
        prompt = f"Convert the following informal text to formal: {input_text}"
    elif analysis_type == "Find Filler Words":
        prompt = f"Identify filler words in the following text: {input_text}"

    chat_session = model.start_chat(history=[])
    response = chat_session.send_message(prompt)
    return response.text

st.title("AI Text Analysis with Google Generative AI")

input_text = st.text_area("Enter your text here:", "")
analysis_type = st.selectbox("Choose the type of analysis:",
                             ["Grammar Correction", "Emotion Detection", "Informal to Formal", "Find Filler Words"])

if st.button("Analyze"):
    if input_text.strip() == "":
        st.warning("Please enter some text to analyze.")
    else:
        result = analyze_text(input_text, analysis_type)
        st.subheader("Result:")
        st.write(result)